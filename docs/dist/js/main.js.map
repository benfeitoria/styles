{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\n// Set default percentage for progress bar examples large, medium and small\nprogressBar({\n  'percent': 50,\n  'id': 'example-progress-bar'\n});\nprogressBar({\n  'percent': 50,\n  'id': 'example-progress-bar-md'\n});\nprogressBar({\n  'percent': 50,\n  'id': 'example-progress-bar-sm'\n});\nprogressBar({\n  'id': 'live-example-c'\n});\nprogressBar({\n  'id': 'live-example-h',\n  'type': 'horizontal'\n}); // Live example circle progress bar\n\nvar inputCircle = document.querySelector('#live-example-value-c');\n\nif (inputCircle) {\n  inputCircle.addEventListener('change', function (e) {\n    progressBar({\n      'percent': inputCircle.value,\n      'id': 'live-example-c'\n    });\n  });\n} // Live example horizontal progress bar\n\n\nvar inputHorizontal = document.querySelector('#live-example-value-h');\n\nif (inputCircle) {\n  inputHorizontal.addEventListener('change', function (e) {\n    progressBar({\n      'percent': inputHorizontal.value,\n      'id': 'live-example-h',\n      'type': 'horizontal'\n    });\n  });\n}\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nrequire('../../js/main');\n\nrequire('./components/progressbar');\n\n},{\"../../js/main\":9,\"./components/progressbar\":1}],3:[function(require,module,exports){\n\"use strict\";\n\nvar alertDismissibles = document.querySelectorAll('.js-alert-dismissible');\nalertDismissibles.forEach(function (alertDismissible) {\n  var element = alertDismissible.querySelector('.alert__close');\n\n  if (element) {\n    element.addEventListener('click', function (event) {\n      event.preventDefault();\n      element.parentElement.classList.add('fade-out');\n    });\n  }\n});\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\n\nvar actions = document.getElementsByClassName('collapse__action');\nObject.keys(actions).forEach(function (key) {\n  actions[key].addEventListener('click', function (event) {\n    var element = event.currentTarget;\n\n    if (!(element.classList.contains('radio') && element.classList.contains('collapse__action'))) {\n      event.preventDefault();\n    } // Show/hidden multiple or single content when action is trigger\n\n\n    element.dataset.content.split(',').forEach(function (contentId) {\n      var collapseContent = document.getElementById(contentId); // Add class 'is-expanded' to one element at a time if aciton has class 'toggle'\n\n      if (element.classList.contains('toggle')) {\n        $(collapseContent).closest('.collapse').find('.collapse__content').removeClass('is-expanded');\n        return collapseContent.classList.add('is-expanded');\n      }\n\n      if (collapseContent.classList.contains('is-expanded')) {\n        return collapseContent.classList.remove('is-expanded');\n      }\n\n      return collapseContent.classList.add('is-expanded');\n    }); // Add class 'is-expanded' to one action at a time\n\n    if (element.classList.contains('toggle')) {\n      $(element).closest('.collapse').find('.collapse__action').removeClass('is-expanded');\n      return element.classList.add('is-expanded');\n    }\n\n    if (element.classList.contains('is-expanded')) {\n      return element.classList.remove('is-expanded');\n    }\n\n    return element.classList.add('is-expanded');\n  });\n});\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\n\nvar _this = void 0;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction closeAllSelect(elmnt) {\n  var i;\n  var arrNo = [];\n  var optionsDiv = document.getElementsByClassName('custom-select__items');\n  var optionSelected = document.getElementsByClassName('custom-select__selected');\n\n  for (i = 0; i < optionSelected.length; i += 1) {\n    if (elmnt === optionSelected[i]) {\n      arrNo.push(i);\n    } else {\n      optionSelected[i].classList.remove('custom-select__selected--active');\n    }\n  }\n\n  for (i = 0; i < optionsDiv.length; i += 1) {\n    if (arrNo.indexOf(i)) {\n      optionsDiv[i].classList.add('custom-select__items--hidden');\n    }\n  }\n}\n\ndocument.onreadystatechange = function () {\n  if (document.readyState === 'complete') {\n    setTimeout(function () {\n      var i;\n      var j;\n      var selectElement;\n      var selectDiv;\n      var optionsDiv;\n      var optionDiv;\n      /* Look for any elements with the class \"custom-select\" */\n\n      var selectDivContainer = document.getElementsByClassName('custom-select');\n\n      for (i = 0; i < selectDivContainer.length; i += 1) {\n        if (selectDivContainer[i].getElementsByTagName('select')) {\n          ;\n\n          var _selectDivContainer$i = selectDivContainer[i].getElementsByTagName('select');\n\n          var _selectDivContainer$i2 = _slicedToArray(_selectDivContainer$i, 1);\n\n          selectElement = _selectDivContainer$i2[0];\n\n          /* For each element create a new DIV that will act as the selected item */\n          selectDiv = document.createElement('DIV');\n          selectDiv.setAttribute('class', selectElement.disabled ? 'custom-select__selected custom-select__selected--disabled' : 'custom-select__selected');\n          selectElement.selectedIndex = selectElement.selectedIndex > 0 ? selectElement.selectedIndex : 0;\n          selectDiv.innerHTML = selectElement.options[selectElement.selectedIndex].innerHTML;\n          selectDivContainer[i].appendChild(selectDiv);\n          /* For each element, create a new DIV that will contain the option list */\n\n          optionsDiv = document.createElement('DIV');\n          optionsDiv.setAttribute('class', 'custom-select__items custom-select__items--hidden');\n\n          for (j = 1; j < selectElement.length; j += 1) {\n            /* For each option in the original select element,\n            create a new DIV that will act as an option item */\n            optionDiv = document.createElement('DIV');\n            optionDiv.innerHTML = selectElement.options[j].innerHTML;\n            optionDiv.addEventListener('click', function () {\n              /* When an item is clicked, update the original select box,\n                and the selected item */\n              var y;\n              var x;\n              var k;\n\n              var _this$parentNode$pare = _this.parentNode.parentNode.getElementsByTagName('select'),\n                  _this$parentNode$pare2 = _slicedToArray(_this$parentNode$pare, 1),\n                  s = _this$parentNode$pare2[0];\n\n              var h = _this.parentNode.previousSibling;\n\n              for (x = 0; x < s.length; x += 1) {\n                if (s.options[x].innerHTML === _this.innerHTML) {\n                  s.selectedIndex = x;\n                  h.innerHTML = _this.innerHTML;\n                  y = _this.parentNode.getElementsByClassName('custom-select__items--selected');\n\n                  for (k = 0; k < y.length; k += 1) {\n                    y[k].removeAttribute('class');\n                  }\n\n                  _this.setAttribute('class', 'custom-select__items--selected');\n\n                  break;\n                }\n              }\n\n              h.click();\n            });\n            optionsDiv.appendChild(optionDiv);\n          }\n\n          selectDivContainer[i].appendChild(optionsDiv);\n          selectDiv.addEventListener('click', function (e) {\n            /* When the select box is clicked, close any other select boxes,\n            and open/close the current select box if not disabled */\n            e.stopPropagation();\n            closeAllSelect(_this);\n\n            _this.nextSibling.classList.toggle('custom-select__items--hidden');\n\n            _this.classList.toggle('custom-select__selected--active');\n          });\n        }\n      }\n      /* If the user clicks anywhere outside the select box,\n      then close all select boxes: */\n\n\n      document.addEventListener('click', closeAllSelect);\n    }, 1000);\n  }\n};\n\n},{}],6:[function(require,module,exports){\n\"use strict\";\n\nvar mobileTopNavigation = document.querySelector('.navigation--top--mobile');\nvar dropdownItems = mobileTopNavigation.querySelectorAll('li.dropdown');\ndropdownItems.forEach(function (dropdownItem) {\n  dropdownItem.querySelector('a').addEventListener('click', function (event) {\n    event.preventDefault();\n    console.log(event);\n\n    if (event.target.nextElementSibling !== null) {\n      event.target.nextElementSibling.classList.toggle('collapsed');\n    }\n  });\n});\nmobileTopNavigation.querySelector('i.navigation--top--mobile__heading__menu-toggle').addEventListener('click', function (event) {\n  var menuToggle = event.target;\n  menuToggle.innerText = menuToggle.innerText === 'close' ? 'menu' : 'close';\n  mobileTopNavigation.classList.toggle('collapsed');\n});\n\n},{}],7:[function(require,module,exports){\n\"use strict\";\n\n/**\n * Progress bar function\n * Parameters:\n * INT percent = percent value\n * STRING id = id of element\n * STRING type = type of progress bar ('circle' or 'horizontal')\n */\nwindow.progressBar = function (params) {\n  if (!params.id || !document.getElementById(params.id)) return false;\n  var element = document.getElementById(params.id);\n  var percent = params.percent ? params.percent : 0;\n  var type = params.type ? params.type : 'circle';\n\n  if (type !== 'circle' && element) {\n    // Set percent of horizontal progress bar\n    element.value = percent;\n  } else {\n    var text = element.querySelector('.progress-bar__text');\n    var circle = element.querySelector('circle');\n    var radius = '24';\n\n    if (element.classList.contains('progress-bar--sm')) {\n      radius = '9';\n    } else if (element.classList.contains('progress-bar--md')) {\n      radius = '11';\n    }\n\n    var circumference = radius * 2 * Math.PI; // Defines the default size of green and gray circle around the icon\n\n    circle.style.strokeDasharray = \"\".concat(circumference, \" \").concat(circumference);\n    circle.style.strokeDashoffset = \"\".concat(circumference); // Calculate the green circle size according to the percentage entered\n\n    var offset = circumference - percent / 100 * circumference;\n    circle.style.strokeDashoffset = offset; // Change percentage text\n\n    if (text) {\n      text.innerHTML = \"\".concat(percent, \"%\");\n    } // Change element color when percent is 100\n\n\n    if (percent === 100) {\n      element.classList.add('progress-bar--done');\n    } else {\n      element.classList.remove('progress-bar--done');\n    }\n  }\n};\n\n},{}],8:[function(require,module,exports){\n\"use strict\";\n\nvar forms = document.querySelectorAll('.form-validation');\nforms.forEach(function (form) {\n  form.addEventListener('submit', function () {\n    var inputs = form.querySelectorAll('input,textarea,select');\n    inputs.forEach(function (input) {\n      if (!input.validity.valid) {\n        input.parentElement.classList.add('input-group--invalid');\n        input.parentElement.querySelector('.input-group__alert--error').classList.add('input-group__alert--active');\n      }\n    });\n  }, false);\n});\n\n},{}],9:[function(require,module,exports){\n\"use strict\";\n\nrequire('./components/alert');\n\nrequire('./components/navbar');\n\nrequire('./components/validation');\n\nrequire('./components/progressbar');\n\nrequire('./components/collapse');\n\nrequire('./components/custom-select');\n\nmodule.exports = {// Your module right here\n};\n\n},{\"./components/alert\":3,\"./components/collapse\":4,\"./components/custom-select\":5,\"./components/navbar\":6,\"./components/progressbar\":7,\"./components/validation\":8}]},{},[2]);\n"],"file":"main.js"}